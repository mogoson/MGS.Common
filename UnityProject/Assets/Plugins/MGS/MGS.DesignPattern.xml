<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MGS.DesignPattern</name>
    </assembly>
    <members>
        <member name="T:MGS.DesignPattern.ObjectPool`1">
            <summary>
            Generic object pool.
            </summary>
            <typeparam name="T">Specified type of object.</typeparam>
        </member>
        <member name="P:MGS.DesignPattern.ObjectPool`1.MaxCount">
            <summary>
            Max count limit of objects in pool.
            </summary>
        </member>
        <member name="P:MGS.DesignPattern.ObjectPool`1.CurrentCount">
            <summary>
            Current count of objects in pool.
            </summary>
        </member>
        <member name="F:MGS.DesignPattern.ObjectPool`1.objectStack">
            <summary>
            Stack store objects.
            </summary>
        </member>
        <member name="F:MGS.DesignPattern.ObjectPool`1.createFunc">
            <summary>
            Function of create new object.
            </summary>
        </member>
        <member name="F:MGS.DesignPattern.ObjectPool`1.resetAction">
            <summary>
            Action of reset object to default.
            </summary>
        </member>
        <member name="F:MGS.DesignPattern.ObjectPool`1.disposeAction">
            <summary>
            Action of dispose object.
            </summary>
        </member>
        <member name="M:MGS.DesignPattern.ObjectPool`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0},System.Int32)">
            <summary>
            Constructor of ObjectPool.
            </summary>
            <param name="create">Function of create new object.</param>
            <param name="reset">Action of reset object to default.</param>
            <param name="dispose">Action of dispose object.</param>
            <param name="maxCount">Max count limit of objects in pool.</param>
        </member>
        <member name="M:MGS.DesignPattern.ObjectPool`1.Take">
            <summary>
            Take a object from pool.
            </summary>
            <returns>A object.</returns>
        </member>
        <member name="M:MGS.DesignPattern.ObjectPool`1.Recycle(`0)">
            <summary>
            Recycle object to pool.
            </summary>
            <param name="obj">Object to recycle.</param>
        </member>
        <member name="M:MGS.DesignPattern.ObjectPool`1.Clear">
            <summary>
            Clear all objects.
            </summary>
        </member>
        <member name="T:MGS.DesignPattern.SingleTimer`1">
            <summary>
            Provide a single instance with a timer to tick update for the specified type T;
            Inheritance class should with the sealed access modifier
            and a private parameterless constructor to ensure singleton.
            </summary>
            <typeparam name="T">Specified type.</typeparam>
        </member>
        <member name="P:MGS.DesignPattern.SingleTimer`1.Interval">
            <summary>
            Interval of tick update.
            </summary>
        </member>
        <member name="P:MGS.DesignPattern.SingleTimer`1.Enabled">
            <summary>
            Enabled of tick update.
            </summary>
        </member>
        <member name="P:MGS.DesignPattern.SingleTimer`1.Timer">
            <summary>
            The timer to tick update.
            </summary>
        </member>
        <member name="M:MGS.DesignPattern.SingleTimer`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MGS.DesignPattern.SingleTimer`1.TickUpdate(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Timer tick update.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="T:MGS.DesignPattern.Singleton`1">
            <summary>
            Provide a single instance of the specified type T;
            Inheritance class should with the sealed access modifier
            and a private parameterless constructor to ensure singleton.
            </summary>
            <typeparam name="T">Specified type.</typeparam>
        </member>
        <member name="T:MGS.DesignPattern.Singleton`1.InnerSingleton">
            <summary>
            Inner singleton provide instance.
            </summary>
        </member>
        <member name="F:MGS.DesignPattern.Singleton`1.InnerSingleton.Instance">
            <summary>
            Single instance of the specified type T created by that type's default constructor.
            </summary>
        </member>
        <member name="M:MGS.DesignPattern.Singleton`1.InnerSingleton.#cctor">
            <summary>
            Explicit static constructor to tell C# compiler not to mark type as beforefieldinit.
            </summary>
        </member>
        <member name="P:MGS.DesignPattern.Singleton`1.Instance">
            <summary>
            Single instance of the specified type T.
            </summary>
        </member>
    </members>
</doc>
