<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MGS.Common</name>
    </assembly>
    <members>
        <member name="T:MGS.Common.Collection.EnumeratorUtility">
            <summary>
            Utility for enumerator.
            </summary>
        </member>
        <member name="M:MGS.Common.Collection.EnumeratorUtility.Collect(System.Collections.IEnumerator,System.Action{System.Object},System.Action)">
            <summary>
            Collect progress states and Finished event.
            </summary>
            <param name="enumerator">Source enumerator.</param>
            <param name="progress">Progress event.</param>
            <param name="finished">Finished event.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:MGS.Common.Collection.EnumeratorUtility.Collect(System.Collections.Generic.IEnumerable{System.Collections.IEnumerator},System.Action{System.Object},System.Action)">
            <summary>
            Collect progress states and Finished event.
            </summary>
            <param name="enumerators">IEnumerable of source enumerator.</param>
            <param name="progress">Progress event.</param>
            <param name="finished">Finished event.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:MGS.Common.Collection.EnumeratorUtility.CollectAsync(System.Collections.IEnumerator)">
            <summary>
            Collect results of the enumerator that run in a background thread.
            </summary>
            <param name="enumerator">Source enumerator will run in a background thread.</param>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:MGS.Common.Converter.ArrayConverter">
            <summary>
            Converter of array.
            </summary>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToTwoDimention``1(``0[],System.Int32,System.Int32)">
            <summary>
            Convert one dimention array to two dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <param name="row">Two dimention array's row.</param>
            <param name="column">Two dimention array's column.</param>
            <returns>Two dimentions array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToThreeDimention``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert one dimention array to three dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <param name="layer">Three dimention array's layer.</param>
            <param name="row">Three dimention array's row.</param>
            <param name="column">Three dimention array's column.</param>
            <returns>Three dimentions array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToOneDimention``1(``0[0:,0:])">
            <summary>
            Convert two dimention array to one dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <returns>One dimentions array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ArrayConverter.ToOneDimention``1(``0[0:,0:,0:])">
            <summary>
            Convert three dimention array to one dimentions array.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="array">Source array.</param>
            <returns>One dimentions array.</returns>
        </member>
        <member name="T:MGS.Common.Converter.ByteConverter">
            <summary>
            Converter of byte array.
            </summary>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToBooleanArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to boolean array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Boolean count.</param>
            <returns>Boolean array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToInt16Array(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to Int16 array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Int16 count.</param>
            <returns>Int16 array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToInt32Array(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to Int32 array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Int32 count.</param>
            <returns>Int32 array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToInt64Array(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to Int64 array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Int64 count.</param>
            <returns>Int64 array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToCharArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to char array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Char count.</param>
            <returns>Char array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToSingleArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to single array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Single count.</param>
            <returns>Single array.</returns>
        </member>
        <member name="M:MGS.Common.Converter.ByteConverter.ToDoubleArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert byte array to double array.
            </summary>
            <param name="bytes">Bytes array.</param>
            <param name="start">Start index.</param>
            <param name="count">Convert Double count.</param>
            <returns>Double array.</returns>
        </member>
        <member name="T:MGS.Common.Converter.StructureConverter">
            <summary>
            Converter of structure.
            </summary>
        </member>
        <member name="M:MGS.Common.Converter.StructureConverter.FromByteArray``1(System.Byte[])">
            <summary>
            Convert byte array to structure.
            </summary>
            <typeparam name="T">Structure type.</typeparam>
            <param name="byteArray">Byte array.</param>
            <returns>Structure.</returns>
        </member>
        <member name="M:MGS.Common.Converter.StructureConverter.ToByteArray``1(``0)">
            <summary>
            Convert structure to byte array.
            </summary>
            <typeparam name="T">Structure type.</typeparam>
            <param name="structure">Structure.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="T:MGS.Common.Diagnostics.ProcessUtility">
            <summary>
            Utility for process.
            </summary>
        </member>
        <member name="M:MGS.Common.Diagnostics.ProcessUtility.StartProcess(System.String)">
            <summary>
            Start process from file.
            </summary>
            <param name="fileName">Path of process file.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="M:MGS.Common.Diagnostics.ProcessUtility.KillProcess(System.String)">
            <summary>
            Kill process by name.
            </summary>
            <param name="processName">Name of process.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="M:MGS.Common.Diagnostics.ProcessUtility.KillProcess(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Kill processes by names.
            </summary>
            <param name="processNames">Names of processes.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="T:MGS.Common.IO.DirectoryUtility">
            <summary>
            Utility for directory.
            </summary>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.RequireDirectory(System.String)">
            <summary>
            Require the directory of path exist.
            </summary>
            <param name="path">Directory or file path.</param>
            <returns>Succeed?</returns>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.CopyChildrenEntries(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{System.Single},System.Action{System.Boolean,System.Exception})">
            <summary>
            Copy the children entries of source to dest directory.
            </summary>
            <param name="sourceDir">Source dir.</param>
            <param name="destDir">Dest dir.</param>
            <param name="ignores">Ignore files or directories.</param>
            <param name="progressCallback">Progress callback.</param>
            <param name="finishedCallback">finished callback.</param>
        </member>
        <member name="M:MGS.Common.IO.DirectoryUtility.DeleteChildrenEntries(System.String,System.Collections.Generic.IEnumerable{System.String},System.Action{System.Single},System.Action{System.Boolean,System.Exception})">
            <summary>
            Delete the children entries of the directory.
            </summary>
            <param name="destDir">Dest dir.</param>
            <param name="ignores">Ignore files or directories.</param>
            <param name="progressCallback">Progress callback.</param>
            <param name="finishedCallback">finished callback.</param>
        </member>
        <member name="T:MGS.Common.IO.FileCache">
            <summary>
            Cache for file.
            </summary>
        </member>
        <member name="F:MGS.Common.IO.FileCache.cacheDir">
            <summary>
            Directory for file cache.
            </summary>
        </member>
        <member name="M:MGS.Common.IO.FileCache.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="cacheDir">Directory for file cache.</param>
        </member>
        <member name="M:MGS.Common.IO.FileCache.ResolveFile(System.String)">
            <summary>
            Resolve file path from cache by key.
            </summary>
            <param name="key">Key for cache file.</param>
            <returns>File path from cache by key.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileCache.FindFile(System.String,System.String)">
            <summary>
            Find the cache file from cache by key.
            </summary>
            <param name="key">Key for cache file.</param>
            <param name="md5Hash">Matching file md5 hash [Do not check md5 hash if the value is null or empty].</param>
            <returns>The path of cache file from cache by key.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileCache.CopyFrom(System.String,System.String)">
            <summary>
            Copy the file in to cache.
            </summary>
            <param name="file">The target file path.</param>
            <param name="key">Key for cache file [Use md5 hash of file path as key if the value is null or empty].</param>
            <returns>The key for cache file.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileCache.CopyTo(System.String,System.String)">
            <summary>
            Copy the cache file to dest file by the key.
            </summary>
            <param name="key">Key for cache file.</param>
            <param name="destFile"></param>
            <returns>Is Succeed?</returns>
        </member>
        <member name="M:MGS.Common.IO.FileCache.Clear(System.String)">
            <summary>
            Clear the cache file by key.
            </summary>
            <param name="key">Key for cache file.</param>
        </member>
        <member name="M:MGS.Common.IO.FileCache.Clear">
            <summary>
            Clear all of the cache files.
            </summary>
        </member>
        <member name="T:MGS.Common.IO.FileUtility">
            <summary>
            Utility for file.
            </summary>
        </member>
        <member name="M:MGS.Common.IO.FileUtility.CalPageCount(System.String,System.Int32)">
            <summary>
            Calculate page count of file.
            </summary>
            <param name="filePath">Path of target file.</param>
            <param name="pageSize">Size of page.</param>
            <returns>Page count of file.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileUtility.ReadPage(System.String,System.Int32,System.Int32)">
            <summary>
            Read the index page of file.
            </summary>
            <param name="filePath">Path of target file.</param>
            <param name="pageSize">Size of page.</param>
            <param name="pageIndex">Index of page.</param>
            <returns>Index page bytes.</returns>
        </member>
        <member name="M:MGS.Common.IO.FileUtility.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Read all lines of file.
            </summary>
            <param name="filePath">Path of target file.</param>
            <param name="encoding">Encoding of target file.</param>
            <returns>All lines from file.</returns>
        </member>
        <member name="T:MGS.Common.Crypto.MD5CryptoUtility">
            <summary>
            Utility for MD5 crypto service provider.
            </summary>
        </member>
        <member name="F:MGS.Common.Crypto.MD5CryptoUtility.md5">
            <summary>
            MD5CryptoServiceProvider for utility.
            </summary>
        </member>
        <member name="M:MGS.Common.Crypto.MD5CryptoUtility.ComputeHash(System.Byte[])">
            <summary>
            Compute hash of byte array.
            </summary>
            <param name="buffer">Source byte array.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:MGS.Common.Crypto.MD5CryptoUtility.ComputeHash(System.String)">
            <summary>
            Compute hash of string.
            </summary>
            <param name="source">Source string.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="M:MGS.Common.Crypto.MD5CryptoUtility.ComputeFileHash(System.String)">
            <summary>
            Compute hash of file.
            </summary>
            <param name="filePath">Path of source file.</param>
            <returns>Hash code.</returns>
        </member>
        <member name="T:MGS.Common.Threading.MutexUtility">
            <summary>
            Utility for mutex.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.MutexUtility.MUTEX_PREFIX_GLOBAL">
            <summary>
            Prefix of global mutex name.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.MutexUtility.MUTEX_PREFIX_LOCAL">
            <summary>
            Prefix of local mutex name.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.MutexUtility.GetMutexName(System.String,System.Boolean)">
            <summary>
            Get a name for mutex.
            </summary>
            <param name="name">Custom name for mutex.</param>
            <param name="isGlobal">The name is for global mutex?</param>
            <returns>A name for mutex.</returns>
        </member>
        <member name="M:MGS.Common.Threading.MutexUtility.GetMutexNameForPath(System.String,System.Boolean)">
            <summary>
            Get a name for mutex base on the path.
            </summary>
            <param name="path">Custom file or directory path.</param>
            <param name="isGlobal">The name is for global mutex?</param>
            <returns>A name for mutex base on the path.</returns>
        </member>
        <member name="M:MGS.Common.Threading.MutexUtility.WaitMutex(System.String,System.Int32)">
            <summary>
            Wait mutex for the name;
            This method will block thread until hold mutex or timeout;
            You should release the mutex as soon as possible after does not need it.
            </summary>
            <param name="mutexName">Name of the target mutex.</param>
            <param name="millisecondsTimeout">Timeout of wait mutex.</param>
            <returns>The target mutex or null if timeout.</returns>
        </member>
        <member name="M:MGS.Common.Threading.MutexUtility.WaitMutex(System.String,System.Action,System.Int32)">
            <summary>
            Wait mutex for the name to do custom work;
            This method will block thread until hold mutex or timeout.
            </summary>
            <param name="mutexName">Name of the target mutex.</param>
            <param name="work">Custom work to do.</param>
            <param name="millisecondsTimeout">Timeout of wait mutex.</param>
            <returns>Do work is succeed?</returns>
        </member>
        <member name="T:MGS.Common.Threading.ThreadBridge">
            <summary>
            Bridge for thread.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.ThreadBridge.queue">
            <summary>
            Queue for actions.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.ThreadBridge.Enqueue(System.Action)">
            <summary>
            Enqueue an action.
            </summary>
            <param name="action">Register action.</param>
        </member>
        <member name="M:MGS.Common.Threading.ThreadBridge.Dequeue">
            <summary>
            Dequeue all actions.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.ThreadBridge.Dequeue(System.Int32)">
            <summary>
            Dequeue the number of count actions.
            </summary>
            <param name="count">Count of dequeue actions once.</param>
        </member>
        <member name="T:MGS.Common.Threading.ThreadUtility">
            <summary>
            Utility for thread.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.ThreadUtility.RunAsync(System.Action)">
            <summary>
            Async run action in a thread.
            </summary>
            <param name="action">Run action.</param>
            <returns>Thread instance.</returns>
        </member>
        <member name="T:MGS.Common.Reflection.Reflector">
            <summary>
            Reflector for reflection.
            </summary>
        </member>
        <member name="M:MGS.Common.Reflection.Reflector.SetField(System.Object,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the field supported by the given object.
            </summary>
            <param name="obj">The object whose field value will be set.</param>
            <param name="name">The string containing the name of the data field to get.</param>
            <param name="value">The value to assign to the field.</param>
            <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
        </member>
        <member name="M:MGS.Common.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Sets the value of the property supported by the given object.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="name">The string containing the name of the property to get.</param>
            <param name="value">The value to assign to the property.</param>
            <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
            <param name="index">Optional index values for indexed properties.</param>
        </member>
        <member name="M:MGS.Common.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the method or constructor represented by the given object, using the specified parameters.
            </summary>
            <param name="obj">The object on which to invoke the method or constructor.</param>
            <param name="name">The string containing the name of the method to get.</param>
            <param name="parameters">An argument list for the invoked method or constructor.</param>
            <param name="bindingAttr">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
            <returns></returns>
        </member>
    </members>
</doc>
