<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MGS.UCommon</name>
    </assembly>
    <members>
        <member name="T:MGS.Common.Listener.MonoDragListener">
             <summary>
            Event Listener for drag.
             </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnInitializePotentialDragEvent">
            <summary>
            On initialize potential drag event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnBeginDragEvent">
            <summary>
            On begin drag event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnDragEvent">
            <summary>
            On drag event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnEndDragEvent">
            <summary>
            On end drag event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnDropEvent">
            <summary>
            On drop event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnScrollEvent">
            <summary>
            On scroll event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoDragListener.OnMoveEvent">
            <summary>
            On move event.
            </summary>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On initialize potential drag.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On begin drag.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On drag.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnEndDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On end drag.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnDrop(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On drop.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnScroll(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On scroll.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoDragListener.OnMove(UnityEngine.EventSystems.AxisEventData)">
            <summary>
            On move.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="T:MGS.Common.Listener.MonoPointerListener">
            <summary>
            Event Listener for pointer.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoPointerListener.OnPointerEnterEvent">
            <summary>
            On pointer enter event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoPointerListener.OnPointerExitEvent">
            <summary>
            On pointer exit event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoPointerListener.OnPointerDownEvent">
            <summary>
            On pointer down event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoPointerListener.OnPointerUpEvent">
            <summary>
            On pointer up event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoPointerListener.OnPointerClickEvent">
            <summary>
            On pointer click event.
            </summary>
        </member>
        <member name="M:MGS.Common.Listener.MonoPointerListener.OnPointerEnter(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On pointer enter.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoPointerListener.OnPointerExit(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On pointer exit.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoPointerListener.OnPointerDown(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On pointer down.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoPointerListener.OnPointerUp(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On pointer up.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoPointerListener.OnPointerClick(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            On pointer click.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="T:MGS.Common.Listener.MonoSelectListener">
             <summary>
            Event Listener for select.
             </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoSelectListener.OnSelectEvent">
            <summary>
            On select event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoSelectListener.OnUpdateSelectedEvent">
            <summary>
            On update selected event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoSelectListener.OnDeselectEvent">
            <summary>
            On deselect event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoSelectListener.OnSubmitEvent">
            <summary>
            On submit event.
            </summary>
        </member>
        <member name="E:MGS.Common.Listener.MonoSelectListener.OnCancelEvent">
            <summary>
            On cancel event.
            </summary>
        </member>
        <member name="M:MGS.Common.Listener.MonoSelectListener.OnSelect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            On select.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoSelectListener.OnUpdateSelected(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            On update selected.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoSelectListener.OnDeselect(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            On deselect.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoSelectListener.OnSubmit(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            On submit.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="M:MGS.Common.Listener.MonoSelectListener.OnCancel(UnityEngine.EventSystems.BaseEventData)">
            <summary>
            On cancel.
            </summary>
            <param name="eventData">Pointer event data.</param>
        </member>
        <member name="T:MGS.Common.Extension.GameObjectExtention">
            <summary>
            Extention for UnityEngine.GameObject.
            </summary>
        </member>
        <member name="M:MGS.Common.Extension.GameObjectExtention.BroadcastLayer(UnityEngine.GameObject,System.Int32)">
            <summary>
            Set layer include it's children.
            </summary>
        </member>
        <member name="T:MGS.Common.Extension.TerrainExtension">
            <summary>
            Extension for UnityEngine.Terrain.
            </summary>
        </member>
        <member name="M:MGS.Common.Extension.TerrainExtension.NormalizeRelativePosition(UnityEngine.Terrain,UnityEngine.Vector3)">
            <summary>
            Normalize position relative to terrain.
            </summary>
            <param name="terrain">Base terrain.</param>
            <param name="woldPos">Position in wold space.</param>
            <returns>Normalize position.</returns>
        </member>
        <member name="M:MGS.Common.Extension.TerrainExtension.MapRelativePosition(UnityEngine.Terrain,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Position relative to terrain map.
            </summary>
            <param name="terrain">Base terrain.</param>
            <param name="mapSize">Map size(x is width, z is height).</param>
            <param name="normalizePos">Normalize position relative to terrain.</param>
            <returns>Relative position.</returns>
        </member>
        <member name="T:MGS.Common.Extension.Texture2DExtention">
            <summary>
            Extention for UnityEngine.Texture2D.
            </summary>
        </member>
        <member name="M:MGS.Common.Extension.Texture2DExtention.UpdatePixels(UnityEngine.Texture2D,UnityEngine.Color[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Update the pixels of Texture2D.
            </summary>
            <param name="texture2D">Base Texture2D.</param>
            <param name="colorArray">Color array for pixels.</param>
            <param name="mipLevel">The mip level of the texture to write to.</param>
            <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
            <param name="makeNointerReadable">When set to true, system memory copy of a texture is released.</param>
        </member>
        <member name="M:MGS.Common.Extension.Texture2DExtention.UpdatePixels(UnityEngine.Texture2D,UnityEngine.Color32[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Update the pixels of Texture2D.
            </summary>
            <param name="texture2D">Base Texture2D.</param>
            <param name="colorArray">Color array for pixels.</param>
            <param name="mipLevel">The mip level of the texture to write to.</param>
            <param name="updateMipmaps">When set to true, mipmap levels are recalculated.</param>
            <param name="makeNointerReadable">When set to true, system memory copy of a texture is released.</param>
        </member>
        <member name="T:MGS.Common.Serialization.DictionaryAvatar`2">
            <summary>
            Avatar for Dictionary serialize by JsonUtility.
            </summary>
            <typeparam name="TKey">Type of key.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <typeparam name="TValue">Type of value.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
        </member>
        <member name="F:MGS.Common.Serialization.DictionaryAvatar`2.keys">
            <summary>
            List of keys.
            </summary>
        </member>
        <member name="F:MGS.Common.Serialization.DictionaryAvatar`2.values">
            <summary>
            List of values.
            </summary>
        </member>
        <member name="P:MGS.Common.Serialization.DictionaryAvatar`2.Source">
            <summary>
            Source dictionary.
            </summary>
        </member>
        <member name="M:MGS.Common.Serialization.DictionaryAvatar`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source dictionary.</param>
        </member>
        <member name="M:MGS.Common.Serialization.DictionaryAvatar`2.OnBeforeSerialize">
            <summary>
            On before serialize.
            </summary>
        </member>
        <member name="M:MGS.Common.Serialization.DictionaryAvatar`2.OnAfterDeserialize">
            <summary>
            On after deserialize.
            </summary>
        </member>
        <member name="T:MGS.Common.Serialization.JsonUtilityPro">
            <summary>
            JsonUtility Pro.
            </summary>
        </member>
        <member name="M:MGS.Common.Serialization.JsonUtilityPro.FromJson``1(System.String)">
            <summary>
            Deserialize List from avatar json.
            </summary>
            <typeparam name="T">Type of List item.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <param name="json">Json text of ListAvatar.</param>
            <returns>List object.</returns>
        </member>
        <member name="M:MGS.Common.Serialization.JsonUtilityPro.ToJson``1(System.Collections.Generic.List{``0})">
            <summary>
            Serialize List to avatar json.
            </summary>
            <typeparam name="T">Type of List item.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <param name="list">Source list.</param>
            <returns>Json text of ListAvatar.</returns>
        </member>
        <member name="M:MGS.Common.Serialization.JsonUtilityPro.FromJson``2(System.String)">
            <summary>
            Deserialize Dictionary from avatar json.
            </summary>
            <typeparam name="TKey">Type of Dictionary key.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <typeparam name="TValue">Type of Dictionary velue.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <param name="json">Json text of DictionaryAvatar.</param>
            <returns>Dictionary object.</returns>
        </member>
        <member name="M:MGS.Common.Serialization.JsonUtilityPro.ToJson``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Serialize Dictionary to json.
            </summary>
            <typeparam name="TKey">Type of Dictionary key.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <typeparam name="TValue">Type of Dictionary velue.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
            <param name="dictionary">Source dictionary.</param>
            <returns>Json text of DictionaryAvatar.</returns>
        </member>
        <member name="M:MGS.Common.Serialization.JsonUtilityPro.ToListAvatar(System.String)">
            <summary>
            Parse list json to ListAvatar json.
            </summary>
            <param name="json">Json text of list.</param>
            <returns>Json text of ListAvatar.</returns>
        </member>
        <member name="M:MGS.Common.Serialization.JsonUtilityPro.FromListAvatar(System.String)">
            <summary>
            Parse ListAvatar json to list json.
            </summary>
            <param name="json">Json text of ListAvatar.</param>
            <returns>Json text of list.</returns>
        </member>
        <member name="T:MGS.Common.Serialization.ListAvatar`1">
            <summary>
            Avatar for List serialize by JsonUtility.
            </summary>
            <typeparam name="T">Type of list item.
            The T must with SerializableAttribute and public field or private property with SerializeField Attribute if custom type.
            </typeparam>
        </member>
        <member name="F:MGS.Common.Serialization.ListAvatar`1.source">
            <summary>
            Source list.
            </summary>
        </member>
        <member name="M:MGS.Common.Serialization.ListAvatar`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source list.</param>
        </member>
        <member name="T:MGS.Common.Threading.Dispatcher">
            <summary>
            Dispatcher base main thread;
            Auto create instance run time.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.Dispatcher.actions">
            <summary>
            Queue to cache custom actions.
            </summary>
        </member>
        <member name="F:MGS.Common.Threading.Dispatcher.locker">
            <summary>
            Locker for thread synchronization.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.Dispatcher.Initialize">
            <summary>
            Initialize dispatcher.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.Dispatcher.Update">
            <summary>
            Update to invoke actions.
            </summary>
        </member>
        <member name="M:MGS.Common.Threading.Dispatcher.BeginInvoke(System.Action)">
            <summary>
            Begin invoke the action by main thread.
            </summary>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="T:MGS.Common.Utility.ColorBlendUtility">
            <summary>
            Utility for color blend.
            </summary>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.Blend(UnityEngine.Color,UnityEngine.Color,MGS.Common.Utility.ColorBlendMode)">
            <summary>
            Blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <param name="mode">Mode of color blend.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.NormalBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Normal mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.DissolveBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Dissolve mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.DarkenBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Darken mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.MultiplyBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Multiply mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.ColorBurnBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            ColorBurn mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.LinearBurnBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            LinearBurn vblend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.DarkerColorBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            DarkerColor mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.LightenBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Lighten mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.ScreenBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Screen mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.ColorDodgeBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            ColorDodge mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.LinearDodgeBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            LinearDodge mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.LighterColorBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            LighterColor mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.OverlayBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Overlay mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.SoftLightBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            SoftLight mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.HardLightBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            HardLight mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.VividLightBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            VividLight mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.LinearLightBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            LinearLight mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.PinLightBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            PinLight mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.HardMixBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            HardMix mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.DifferenceBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Difference mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.ExclusionBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Exclusion mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.SubtractBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Subtract mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.DivideBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Divide mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.HueBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Hue mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.ColorBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Component-Color mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.SaturationBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Saturation mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="M:MGS.Common.Utility.ColorBlendUtility.LuminosityBlend(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Luminosity mode blend color a and color b.
            </summary>
            <param name="a">Color a.</param>
            <param name="b">Color b.</param>
            <returns>Blended color.</returns>
        </member>
        <member name="T:MGS.Common.Utility.ColorBlendMode">
            <summary>
            Mode of color blend.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Normal">
            <summary>
            Normal-Normal Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Dissolve">
            <summary>
            Normal-Dissolve Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Darken">
            <summary>
            Darken-Darken Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Multiply">
            <summary>
            Darken-Multiply Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.ColorBurn">
            <summary>
            Darken-ColorBurn Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.LinearBurn">
            <summary>
            Darken-LinearBurn Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.DarkerColor">
            <summary>
            Darken-DarkerColor Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Lighten">
            <summary>
            Lighten-Lighten Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Screen">
            <summary>
            Lighten-Screen Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.ColorDodge">
            <summary>
            Lighten-ColorDodge Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.LinearDodge">
            <summary>
            Lighten-LinearDodge Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.LighterColor">
            <summary>
            Lighten-LighterColor Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Overlay">
            <summary>
            Contrast-Overlay Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.SoftLight">
            <summary>
            Contrast-SoftLight Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.HardLight">
            <summary>
            Contrast-HardLight Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.VividLight">
            <summary>
            Contrast-VividLight Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.LinearLight">
            <summary>
            Contrast-LinearLight Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.PinLight">
            <summary>
            Contrast-PinLight Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.HardMix">
            <summary>
            Contrast-HardMix Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Difference">
            <summary>
            Cancelation-Difference Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Exclusion">
            <summary>
            Cancelation-Exclusion Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Subtract">
            <summary>
            Cancelation-Subtract Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Divide">
            <summary>
            Cancelation-Divide Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Hue">
            <summary>
            Component-Hue Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Color">
            <summary>
            Component-Color Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Saturation">
            <summary>
            Component-Saturation Mode.
            </summary>
        </member>
        <member name="F:MGS.Common.Utility.ColorBlendMode.Luminosity">
            <summary>
            Component-Luminosity Mode.
            </summary>
        </member>
        <member name="T:MGS.Common.Utility.EventSystemUtility">
            <summary>
            Utility for EventSystem.
            </summary>
        </member>
        <member name="M:MGS.Common.Utility.EventSystemUtility.CheckPointerIsOver(UnityEngine.GameObject)">
            <summary>
            Check mouse pointer is over target gameobject?
            </summary>
            <param name="target">Target gameobject.</param>
            <returns>Pointer is over target gameobject?</returns>
        </member>
        <member name="T:MGS.Common.Utility.VectorUtility">
            <summary>
            Utility for unity vector.
            </summary>
        </member>
        <member name="M:MGS.Common.Utility.VectorUtility.ProjectAngle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Calculate project angle of two vectors in the range(0~360).
            </summary>
            <param name="from">Start vector.</param>
            <param name="to">End vector.</param>
            <param name="normal">Normal of plane to project.</param>
            <returns>Project angle of two vectors.</returns>
        </member>
    </members>
</doc>
